{"version":3,"file":"static/js/149.1161e539.chunk.js","mappings":"iUAmCA,EA/B2BA,EAAAA,YAAiB,WAWzCC,GAAQ,IAVTC,EAAQ,EAARA,SACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAU,EAAVA,WACAC,EAAK,EAALA,MACAC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAU,EAAVA,WACGC,GAAK,YAEFC,GAAoBC,EAAAA,EAAAA,IAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAJ,OAAOG,EAAiB,YAAIH,GAAWD,GAAQ,GAAJ,OAAOI,EAAiB,YAAIJ,GAAQJ,GAAW,GAAJ,OAAOQ,EAAiB,YAAuB,kBAAZR,EAAuB,WAAH,OAAcA,GAAY,WAAaC,GAAY,GAAJ,OAAOO,EAAiB,aAAaN,GAAc,GAAJ,OAAOM,EAAiB,eAAeL,GAAS,GAAJ,OAAOK,EAAiB,WACzWI,GAAqBC,EAAAA,EAAAA,KAAK,SAAS,kBACpCN,GAAK,IACRR,UAAWW,EACXb,IAAKA,KAEP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAH,OAAMN,EAAiB,eAI1C,MAH0B,kBAAfF,IACTQ,EAAkB,GAAH,OAAMA,EAAe,YAAIR,KAEtBO,EAAAA,EAAAA,KAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,GAEd,CACA,OAAOA,CACT,I,8BCsCA,MAvDA,WACC,IAAII,GAAQC,EAAAA,EAAAA,KAAY,SAACD,GAAU,OAAOA,CAAM,IAE3CE,GAAWC,EAAAA,EAAAA,MACf,GAAwBC,EAAAA,EAAAA,UAAU,GAAE,eAEjC,OAFO,KAAS,MAGb,0BAQA,UAAC,EAAK,CAACd,WAAW,KAAI,WACpB,4BACE,2BACE,wBAAI,OACJ,wBAAI,wBACJ,wBAAI,kBACJ,wBAAI,kCAINU,EAAMK,KAAKC,KAAI,SAACC,EAAEC,GAChB,OACE,4BACA,gBAAIC,IAAKD,EAAE,WACT,wBAAKR,EAAMK,KAAKG,GAAGE,MACnB,wBAAKV,EAAMK,KAAKG,GAAGG,QACnB,wBAAKX,EAAMK,KAAKG,GAAGI,SACnB,2BACE,mBAAQC,QAAS,WACjBX,GAASY,EAAAA,EAAAA,IAASd,EAAMK,KAAKG,GAAGE,IAClC,EAAE,SAAC,QACD,mBAAQG,QAAS,WACjBX,GAASa,EAAAA,EAAAA,IAAcf,EAAMK,KAAKG,GAAGE,IACrC,EAAE,SAAC,QACH,mBAAQG,QAAS,SAACG,GAChBd,GAASe,EAAAA,EAAAA,IAAYjB,EAAMK,KAAKG,GAAGE,IACrC,EAAE,SAAC,wBAKX,QAOZ,C","sources":["../node_modules/react-bootstrap/esm/Table.js","routes/Cart.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","import Table from 'react-bootstrap/Table';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { changeName , increase } from \"./../store/userSlice.js\"\r\nimport { addCount , decreaseCount , deleteCount } from \"./../store.js\"\r\nimport { memo, useState } from 'react';\r\n\r\n// let Child = memo (function (){\r\n//   console.log('재렌더링됨')\r\n//   return <div>자식임</div>\r\n// })\r\n//memo = 필요할 때 꼭 재 렌더링 해주세요 쓸데없이 재 렌더링이 되는것을 막는다\r\n//memo = 특정상황에서만 재 렌더링을 시켜준다.\r\n// props가 변할때만  전송된다. 기존 props와 신규 props를 비교해서 렌더링을 진행하여\r\n// 복잡하면 시간이 오래걸릴 수 있다. \r\n\r\n// state 변경함수가 성능저하의 원인이라면 startTransition(()=>{})으로 감싸준다.\r\n\r\nfunction Cart(){\r\n let state = useSelector((state)=>{ return state })\r\n//  let state = useSelector((state)=>{ return state.user }) redex에 저장한 user항목만을 가져다 쓸수 있음\r\n  let dispatch = useDispatch()\r\n  let [count,setCount] =  useState (0)\r\n \r\n     return(\r\n        <div>\r\n          {/* <Child></Child>\r\n          <button onClick={()=>{ setCount(count+1) }}>+</button> */}\r\n          {/* {state.user.name}{state.user.age} 의 장바구니\r\n          <button onClick={()=>{\r\n            dispatch(increase(100))\r\n          }}>버튼</button> */}\r\n\r\n        <Table responsive=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>상품명</th>\r\n              <th>수량</th>\r\n              <th>변경하기</th>\r\n            </tr>\r\n          </thead>\r\n          {\r\n            state.cart.map((a,i)=>{\r\n              return(\r\n                <tbody>\r\n                <tr ket={i}>\r\n                  <td>{state.cart[i].id}</td>\r\n                  <td>{state.cart[i].name}</td>\r\n                  <td>{state.cart[i].count}</td>\r\n                  <td>\r\n                    <button onClick={()=>{\r\n                    dispatch(addCount(state.cart[i].id))\r\n                  }}>+1</button> \r\n                    <button onClick={()=>{\r\n                    dispatch(decreaseCount(state.cart[i].id))\r\n                    }}>-1</button>\r\n                    <button onClick={(e)=>{\r\n                      dispatch(deleteCount(state.cart[i].id));\r\n                    }}>삭제</button>\r\n                  </td>\r\n                </tr>\r\n             </tbody>\r\n              )\r\n            })\r\n          }\r\n\r\n\r\n        </Table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Cart"],"names":["React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","state","useSelector","dispatch","useDispatch","useState","cart","map","a","i","ket","id","name","count","onClick","addCount","decreaseCount","e","deleteCount"],"sourceRoot":""}