{"version":3,"file":"static/js/157.f7b5a76e.chunk.js","mappings":"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","sources":["routes/Sub1.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport {Nav} from 'react-bootstrap';\r\nimport {Context1}  from './../App.js';\r\nimport {addItem} from \"./../store.js\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nlet BuyBtn = styled.button`\r\n  background : ${ props => props.bg };\r\n  color : ${ props => props.bg  == 'red' ? 'white' : 'black' };\r\n  padding:10px;\r\n  width:100px;\r\n  border-radius:15px;\r\n  border:none;\r\n`\r\n\r\n// let NewBtn = styled.button(YellowBtn)\r\n\r\nfunction Sub1(props){\r\n\r\n  useEffect(()=>{\r\n    let a = setTimeout(()=>{ setEvent(false) },2000)\r\n    return ()=>{\r\n      clearTimeout(a)\r\n    }\r\n  },[])\r\n  //  return을 주면 useEffect 전에 실행되고 useEffect가 실행된다.\r\n  // [] (디펜던시) 안의 변수가 바뀔때만 useEffect를 실행시켜 줌 , 공란이면 mount(로드)시 1회 실행하고 영영 실행되지 않음\r\n  // 내용 안의 버튼을 눌렀을때 발생되는 재랜더링 시 useEffect가 실행되는 것을 막아준다. 최초 mount 됬을때만 실행된다.\r\n  // clearTimeout = 기존 데이터 요청은 제거해주세요\r\n  let [event , setEvent] = useState(true)\r\n  let [num,setNum] = useState('')\r\n  let [탭,탭변경] = useState(0)\r\n  let [screen,setScreen] = useState('')\r\n  let dispatch = useDispatch()\r\n\r\n  useEffect(()=>{\r\n    if(isNaN(num) == true){\r\n      alert('숫자만입력하세요')\r\n    }\r\n  },[num]\r\n  )\r\n  console.log(num)\r\n// isNaN 문자인지 판별해준다 아래 input의 num 값이 문자가 true 라면 얼럿창이 뜬다. [num] 변수가 변경될때만 실행된다!\r\n\r\n    \r\n\r\n// mount , update시 실행\r\n// useEffect는 실행시점이 다르다. html 렌더링 후에 실행이된다.\r\n// \r\n\r\n// for (var i = 0;  i<10000; i++){\r\n//   console.log(1)\r\n// }\r\n// javascript 특성상 위에서부터 읽기때문에 이렇게 되면 html을 늦게 보여줌\r\n//  그러나 해당 반복문을 useEffect에 넣기 되면 html 먼저 보여지고 나중에 함수가 실행됨\r\n\r\n\r\n\r\n\r\n// --------------------------------------useParams (유저 입력 url 파라미터)------------------------------//\r\n\r\n\r\n  let {id} = useParams();\r\n  let 찾은상품 = props.pet.find(function(x){\r\n    return x.id == id\r\n  })\r\n    //유저가 입력한 url 파라미터를 갖다 쓸 수 있음\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// --------------------------------------localStorage------------------------------//\r\n\r\n    useEffect(()=>{\r\n      let preview = localStorage.getItem('watched')\r\n      //  watched를 꺼내고\r\n      preview = JSON.parse(preview)\r\n      // JSON 자료로 뽑아오게되고\r\n      preview.push(찾은상품.id)\r\n      // array에 자료 추가\r\n      preview = new Set(preview)\r\n      // set자료형으로 변환해서 중복데이터 제거\r\n      preview = Array.from(preview)\r\n      // 다시 array 형태로 변환\r\n      localStorage.setItem('watched',JSON.stringify(preview))\r\n      // localStorage에 다시 저장\r\n    },[])\r\n  // 누가 Detail 페이지에 접속하면\r\n  // 그 페이지에 보이는 상품ID를 가져와서\r\n  // localStorage에 watched 항목에 추가\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      setTimeout(()=>{setScreen('end')},100)\r\n      return()=>{\r\n        setScreen('')\r\n      }\r\n    },[])\r\n\r\n    return(\r\n      <div className={\"container start \"+screen}>\r\n      {\r\n      event == true\r\n      ?<div className=\"alert alert-warning\">\r\n        2초 이내 구매시 할인\r\n      </div>\r\n      : null\r\n      }\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img src={'/image/mid-cont'+id+'.jpg'} width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}</p>\r\n          <div>개수:<input onChange={(e)=>{setNum(e.target.value)}}></input></div>\r\n          <BuyBtn bg=\"red\" onClick={()=>{\r\n            dispatch(addItem({id : 찾은상품.id, name : 찾은상품.title, count : 1}))\r\n          }}>주문하기</BuyBtn>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Nav fill variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n      <Nav.Item>\r\n        <Nav.Link onClick={()=>{탭변경(0)}} eventKey=\"link-0\">Active</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link onClick={()=>{탭변경(1)}} eventKey=\"link-1\">Loooonger NavLink</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link onClick={()=>{탭변경(2)}} eventKey=\"link-2\">Link</Nav.Link>\r\n      </Nav.Item>\r\n    </Nav>\r\n    <TabContent 탭={탭}/>\r\n    \r\n    </div> \r\n    )\r\n  }\r\n  function TabContent({탭}){\r\n  let [fade,setFade] = useState('')\r\n\r\n  useEffect(()=>{\r\n    setTimeout(()=>{setFade('end')},100)\r\n    return ( )=>{\r\n      setFade('')\r\n    }\r\n  },[탭])\r\n  // [탭]을 줘서 탭이 변할때마다 내용에 애니메이션을 추가하기 위해\r\n  //  return으로 useEffect 가 실행되기 전 fade를 비워주고\r\n  //  TabContent 마운트 전 fade에 end를 0.1초 뒤에 부여해준다.\r\n  //  automatic batching 기능으로 인해 setTimeout으로 시간차를 준다\r\n  //  automatic batching : 같은 스테이트가 가까이 있으면 하나로 인식함 (end만 실행됨)\r\n\r\n\r\n  if(탭==0){\r\n  return  <div className={'start '+fade}>내용0</div>\r\n  }else if(탭==1){\r\n  return <div className={'start '+fade}>내용1</div>\r\n  }else if(탭==2){\r\n  return <div className={'start '+fade}>내용2</div>\r\n  }\r\n    //HTML을 담은 if문을 사용하고 싶다면  앱 컴포넌트 바깥에 Tabcontent 컴포넌트를 생성한 뒤 그 안에 담아\r\n    // props 전송 하여 사용\r\n    // props 사용이 귀찮다하면 {부모에서 props로 넘긴 스테이트이름을 파라메터에 주면 됨}\r\n    //*2)     [<div>내용0</div>,<div>내용1</div>,<div>내용2</div>[탭]] 탭에 들어가는 숫자에 따라 보이는 내용이 달라짐\r\n\r\n\r\n    // *3) return <div className=\"start end\">\r\n    //     {[<div>내용0</div>,<div>내용1</div>,<div>내용2</div>][탭]}\r\n    //     </div>\r\n    //    위 각 각 className=\"start end\"을 준 내용을 단축시키고 동일한 내용임\r\n\r\n\r\n  }\r\n  export default Sub1;"],"names":["BuyBtn","styled","props","bg","TabContent","탭","useState","fade","setFade","useEffect","setTimeout","className","a","setEvent","clearTimeout","event","num","setNum","탭변경","screen","setScreen","dispatch","useDispatch","isNaN","alert","console","log","id","useParams","찾은상품","pet","find","x","preview","localStorage","getItem","JSON","parse","push","Set","Array","from","setItem","stringify","src","width","title","content","price","onChange","e","target","value","onClick","addItem","name","count","fill","variant","defaultActiveKey","eventKey"],"sourceRoot":""}